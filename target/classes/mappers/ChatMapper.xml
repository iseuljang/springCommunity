<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
			"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.springCommunity.mapper.chatMapper">
	<!-- 채팅방 목록 -->
    <!-- 채팅방 목록 -->
    <select id="selectAll" parameterType="searchVO" resultType="chatVO">
		SELECT c.CHAT_NO, CHAT_USERS_TOP, 
			cu.CHAT_USERS_NAME, 
			cm.CHAT_MESSAGE_CONTENT, 
			date_format(cm.CHAT_MESSAGE_DATE,'%H:%i') as CHAT_MESSAGE_TIME,
	        (
             SELECT COUNT(*) 
             FROM CHAT_MESSAGE_READ cmr
             INNER JOIN CHAT_MESSAGE cm2 ON cmr.CHAT_MESSAGE_NO = cm2.CHAT_MESSAGE_NO
             WHERE cm2.CHAT_NO = c.CHAT_NO
              AND cmr.USER_ID = #{user_id} 
              AND cmr.CHAT_MESSAGE_READ_STATE = 0  
	        ) AS unread_count,
	        ( 
		     SELECT COUNT(*) 
		     FROM CHAT_USERS cu2 
		     WHERE cu2.CHAT_NO = c.CHAT_NO 
		      AND cu2.CHAT_USERS_STATE = 1 
			) AS user_count
		FROM CHAT c
		INNER JOIN CHAT_USERS cu ON c.CHAT_NO = cu.CHAT_NO 
		INNER JOIN USER u ON cu.USER_ID = u.USER_ID 
		LEFT JOIN  CHAT_MESSAGE cm ON cm.CHAT_NO = c.CHAT_NO 
		    AND cm.CHAT_MESSAGE_NO = (
		        SELECT MAX(cm2.CHAT_MESSAGE_NO)
		        FROM CHAT_MESSAGE cm2
		        WHERE cm2.CHAT_NO = c.CHAT_NO
		    )
		WHERE cu.USER_ID = #{user_id}
			 AND CHAT_STATE=1 
			 AND CHAT_USERS_STATE=1 
		 	 AND  (
	            cu.CHAT_USERS_NAME LIKE CONCAT('%', #{search_value}, '%') 
	            OR u.USER_NAME LIKE CONCAT('%', #{search_value}, '%') 
	            OR #{search_value} = ''
	        )
	 	 ORDER BY CHAT_USERS_TOP DESC, cm.CHAT_MESSAGE_DATE DESC 
	</select>
	
	<!-- 채팅초대 유저 검색 -->
	<select id="searchUsers" parameterType="searchVO" resultType="userInfoVO">
	    SELECT USER_NAME, USER_ID, DEPARTMENT_NAME, JOB_POSITION_NAME
	    FROM USER u
	    INNER JOIN DEPARTMENT d ON u.DEPARTMENT_ID = d.DEPARTMENT_ID
	    INNER JOIN JOB_POSITION j ON u.JOB_POSITION_ID = j.JOB_POSITION_ID
	    WHERE (
		    	u.USER_NAME LIKE CONCAT('%', #{search_value}, '%')
		       OR d.DEPARTMENT_NAME LIKE CONCAT('%', #{search_value}, '%')
		       OR j.JOB_POSITION_NAME LIKE CONCAT('%', #{search_value}, '%')
		      )
	       AND USER_ID != #{user_id}
	       AND (
	          #{chat_no} IS NULL OR #{chat_no} = 0 
	          OR u.USER_ID NOT IN (
	              SELECT USER_ID 
	              FROM CHAT_USERS 
	              WHERE CHAT_NO = #{chat_no} AND CHAT_USERS_STATE = 1
	          )
	      )
	</select>
	
	<!-- 채팅방 생성 -->
    <insert id="insertRoom" parameterType="chatVO">
        INSERT INTO CHAT (CHAT_GROUP, USER_ID)
        VALUES (#{chat_group}, #{user_id})
        <selectKey order="AFTER" resultType="int" keyProperty="chat_no">
			select LAST_INSERT_ID() as CHAT_NO
		</selectKey>
    </insert>
	
	<!-- 채팅 사용자 추가 -->
    <insert id="addChatUser" parameterType="chatVO">
        INSERT INTO CHAT_USERS (CHAT_NO, USER_ID, CHAT_USERS_NAME)
        VALUES (#{chat_no}, #{user_id}, #{chat_users_name})
    </insert>
	
	<!-- 채팅방 참여 유저 목록 -->
	<select id="chatUsers" parameterType="int" resultType="userInfoVO">
		SELECT u.USER_NAME, u.USER_ID, DEPARTMENT_NAME, JOB_POSITION_NAME 
		FROM USER u
		INNER JOIN CHAT_USERS cu ON u.USER_ID = cu.USER_ID
		INNER JOIN DEPARTMENT d ON u.DEPARTMENT_ID = d.DEPARTMENT_ID
	    INNER JOIN JOB_POSITION j ON u.JOB_POSITION_ID = j.JOB_POSITION_ID
		WHERE cu.CHAT_NO = #{chat_no} AND CHAT_USERS_STATE = 1 
		GROUP BY u.USER_ID
	</select>
	
	<!-- 채팅방 유저 나감 -->
    <update id="leaveChatRoom" parameterType="chatVO">
    	UPDATE CHAT_USERS 
    		SET CHAT_USERS_STATE = 0 
		WHERE USER_ID = #{user_id} AND CHAT_NO = #{chat_no}
    </update>
	
	<!-- 메시지 저장 -->
	<insert id="sendMessage" parameterType="chatMessageVO">
	    INSERT INTO CHAT_MESSAGE (CHAT_NO, CHAT_MESSAGE_CONTENT, USER_ID)
	    VALUES (#{chat_no}, #{chat_message_content}, #{user_id})
	    <selectKey order="AFTER" resultType="int" keyProperty="chat_message_no">
	        SELECT LAST_INSERT_ID() AS CHAT_MESSAGE_NO
	    </selectKey>
	</insert>
	
	<!-- 메시지 저장 후 읽음 상태 추가 -->
    <!-- 입력한 유저 읽음 상태 추가 -->
	<insert id="sendMessageAfterFirst" parameterType="chatMessageVO">
	    INSERT INTO CHAT_MESSAGE_READ (CHAT_MESSAGE_NO, USER_ID, CHAT_MESSAGE_READ_STATE)
	    VALUES (#{chat_message_no}, #{user_id}, 1)
	</insert>
    <!-- 채팅방 참가자 읽음 상태 추가 -->
	<insert id="sendMessageAfterSecond" parameterType="chatMessageVO">
	    INSERT INTO CHAT_MESSAGE_READ (CHAT_MESSAGE_NO, USER_ID, CHAT_MESSAGE_READ_STATE)
	    SELECT #{chat_message_no}, USER_ID, 0
	    FROM CHAT_USERS
	    WHERE CHAT_NO = #{chat_no} AND USER_ID != #{user_id}
	</insert>
    
    <!-- 기존 채팅내용 -->
    <select id="loadMessage" parameterType="int" resultType="chatMessageVO">
		SELECT CHAT_MESSAGE_CONTENT, 
			cm.USER_ID,
			CHAT_NO,
			date_format(cm.CHAT_MESSAGE_DATE,'%H:%i') as CHAT_MESSAGE_TIME,
            date_format(cm.CHAT_MESSAGE_DATE, '%Y.%m.%d') as CHAT_MESSAGE_DATE,
			u.USER_NAME,
        	(
            SELECT COUNT(*)
            FROM CHAT_MESSAGE_READ cmr
            WHERE cmr.CHAT_MESSAGE_NO = cm.CHAT_MESSAGE_NO
              AND cmr.CHAT_MESSAGE_READ_STATE = 0
       		) AS unread_count
		FROM CHAT_MESSAGE cm
		INNER JOIN USER u ON u.USER_ID = cm.USER_ID 
		WHERE CHAT_NO = #{chat_no}
	</select>
	
	<!-- 채팅메시지 읽음처리 -->
	<update id="updateReadState">
	    UPDATE CHAT_MESSAGE_READ
	    SET CHAT_MESSAGE_READ_STATE = 1
	    WHERE CHAT_MESSAGE_NO IN (
	        SELECT CM.CHAT_MESSAGE_NO
	        FROM CHAT_MESSAGE CM
	        JOIN CHAT_USERS CU ON CM.CHAT_NO = CU.CHAT_NO
	        WHERE CM.CHAT_NO = #{chat_no}
	          AND CU.USER_ID = #{user_id}
              AND CU.CHAT_USERS_DATE &lt;= CM.CHAT_MESSAGE_DATE
	    )
	    AND USER_ID = #{user_id}
	</update>
	
	<!-- 채팅방 전체이름 수정 -->
    <update id="updateChatName" parameterType="chatVO">
        UPDATE CHAT_USERS
        SET CHAT_USERS_NAME = #{chat_users_name}
        WHERE CHAT_NO = #{chat_no}
    </update>
    
    <!-- 채팅방 개별이름 수정 -->
    <update id="updateChatUserName" parameterType="chatVO">
        UPDATE CHAT_USERS
        SET CHAT_USERS_NAME = #{chat_users_name}
        WHERE CHAT_NO = #{chat_no} AND USER_ID = #{user_id} 
    </update>
    
    <!-- 채팅방 확인 -->
	<select id="chatInfo" parameterType="int" resultType="chatVO">
	    SELECT c.CHAT_GROUP, u.USER_NAME, cu.CHAT_USERS_STATE  
	    FROM CHAT c 
	    INNER JOIN CHAT_USERS cu ON cu.CHAT_NO = c.CHAT_NO
	    INNER JOIN USER u ON cu.USER_ID = u.USER_ID    
	    WHERE c.CHAT_NO = #{chat_no}
	</select>
	
	<!-- 채팅방 참가 상태가 활성화되어 있는 참가자 수 -->
	<select id="chatStateCount" parameterType="chatVO" resultType="int">
		SELECT COUNT(*) FROM CHAT_USERS 
			WHERE CHAT_NO = #{chat_no} 
				AND CHAT_USERS_STATE = 1 
	</select>
	
	<!-- 채팅방 상태 변경 -->
	<update id="updateChatState" parameterType="chatVO">
		UPDATE CHAT 
			SET CHAT_STATE = 0 
			WHERE CHAT_NO = #{chat_no} 
	</update>
	
	<insert id="sendSystemMessage" parameterType="chatVO">
	    INSERT INTO CHAT_MESSAGE (CHAT_NO, CHAT_MESSAGE_CONTENT, USER_ID)
	    VALUES (#{chat_no}, #{chat_message_content}, 'SYSTEM') 
	    <selectKey order="AFTER" resultType="int" keyProperty="chat_message_no">
	        SELECT LAST_INSERT_ID() AS CHAT_MESSAGE_NO
	    </selectKey>
	</insert>
	
	
	
	<!-- 1대1 채팅을 그룹채팅으로 수정 -->
	<update id="updateChatGroup" parameterType="int">
		UPDATE CHAT 
			SET CHAT_GROUP = 0 
			WHERE CHAT_NO = #{chat_no} 
	</update>
	
	<!-- 그룹채팅을 1대1로 변경 -->
	<update id="updateChatOne" parameterType="int">
		UPDATE CHAT 
			SET CHAT_GROUP = 1 
			WHERE CHAT_NO = #{chat_no} 
	</update>
	
	<!-- 채팅방 이름 1개 확인 -->
	<select id="chatName" parameterType="chatVO" resultType="chatVO">
		SELECT CHAT_USERS_NAME   
		FROM CHAT_USERS 
		WHERE CHAT_NO = #{chat_no} AND USER_ID = #{user_id}  
	</select>
	
	<!-- 채팅방 고정&고정풀기 -->
	<update id="updateChatTop" parameterType="chatVO">
		UPDATE CHAT_USERS 
		SET CHAT_USERS_TOP = CASE 
		                 WHEN CHAT_USERS_TOP = 1 THEN 0 
		                 ELSE 1 
		               END
		WHERE CHAT_NO = #{chat_no} AND USER_ID = #{user_id}
	</update>
	
	<!-- 기존 사용자 상태 확인 -->
	<select id="selectUserState" parameterType="chatVO" resultType="chatVO">
	    SELECT CHAT_USERS_STATE, u.USER_NAME 
	    FROM CHAT_USERS cu 
	    INNER JOIN USER u ON u.USER_ID = cu.USER_ID 
	    WHERE CHAT_NO = #{chat_no} 
	      AND cu.USER_ID = #{user_id}
	</select>
	
	<!-- 사용자 상태 업데이트 -->
	<update id="updateUserState" parameterType="chatVO">
	    UPDATE CHAT_USERS
	    SET CHAT_USERS_STATE = #{chat_users_state}, CHAT_USERS_DATE = NOW()
	    WHERE CHAT_NO = #{chat_no} 
	      AND USER_ID = #{user_id}
	</update>
	
	<!-- 안읽은 전체채팅방 메시지 -->
	<select id="unreadMessageCounts" parameterType="string" resultType="int">
	    SELECT COUNT(*) AS unread_count
	    FROM CHAT_MESSAGE cm
	    LEFT JOIN CHAT_MESSAGE_READ cmr 
	        ON cm.CHAT_MESSAGE_NO = cmr.CHAT_MESSAGE_NO 
	        AND cmr.USER_ID = #{user_id}
	    WHERE cm.CHAT_NO IN (
	        SELECT CHAT_NO 
	        FROM CHAT_USERS 
	        WHERE USER_ID = #{user_id} AND CHAT_USERS_STATE = 1
	    )
	    AND (cmr.CHAT_MESSAGE_READ_STATE IS NULL OR cmr.CHAT_MESSAGE_READ_STATE = 0)
	</select>
</mapper>